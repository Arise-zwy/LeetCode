/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int depth(int u,string s)
    {
        int ans=0;
        u--;
        while(u>=0 && s[u]=='-') 
        {
            ans++;
            u--;
        }
        return ans;
    }
    int current_num(int u,string s)
    {
        int ans=0;
        while(u<s.size() && s[u]!='-')
        {
            ans*=10;
            ans+=(s[u]-'0');
            u++;
        }
        return ans;
    }
    TreeNode* recoverFromPreorder(string S) 
    {
        if(S.size()==0) return NULL;
        stack <TreeNode*> st;
        int root_val=current_num(0,S);
        TreeNode* root=new TreeNode(root_val);
        st.push(root);
        
        for(int i=1;i<S.size();i++)
        {
            if(S[i]=='-') continue;
            if(S[i]!='-' && S[i-1]!='-') continue;//说明这一位属于上一个数
            int d=depth(i,S);
            while(st.size()>d) st.pop();
            TreeNode* node=st.top();
            TreeNode* son =new TreeNode(current_num(i,S));
            if(node->left) node->right=son;
            else node->left=son;
            st.push(son);
        }
        return root;

    }
};

