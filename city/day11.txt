88. 合并两个有序数组

给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。

 

说明:

    初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。
    你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。

 

示例:

输入:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

输出: [1,2,2,3,5,6]

class Solution {
public:
	void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
		multiset<int>p;
		for (int i = 0; i < m;i++) {
			p.insert(nums1[i]);
		}
		for (int i = 0; i < n; i++) {
			p.insert(nums2[i]);
		}
		nums1.clear();
		for (auto i = p.begin(); i != p.end();i++) {
			nums1.push_back(*i);
		}
	}
};

148. 排序链表

在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。

示例 1:

输入: 4->2->1->3
输出: 1->2->3->4

示例 2:

输入: -1->5->3->4->0
输出: -1->0->3->4->5




class Solution {
public:
	int find(int le, int ri, vector<int>&p) {
		int base = p[le];
		while (le < ri) {
			while (le < ri&&p[ri] >= base) {
				ri--;
			}
			p[le] = p[ri];
			while (le < ri&&p[le] <= base) {
				le++;
			}
			p[ri] = p[le];
		}
		p[le] = base;
		return le;
	}
	void quick_sort(int le, int ri, vector<int>&p) {
		if (le > ri)
			return ;
		int pos = find(le, ri, p);

		quick_sort(le, pos-1, p);
		quick_sort(pos + 1, ri, p);
	}
	ListNode* sortList(ListNode* head) {
		vector<int>p;
		while (head != NULL) {
			p.push_back(head->val);
			head = head->next;
		}
		int n = p.size();
		quick_sort(0, n - 1, p);
		ListNode* H = new ListNode(0);
		ListNode* E = H;
		for (int i = 0; i < n; i++) {
			ListNode* tp = new ListNode(0);
			tp->val = p[i];
			tp->next = NULL;
			E->next = tp;
			E = tp;
		}
		return H->next;
	}
};


25. K 个一组翻转链表

给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。

k 是一个正整数，它的值小于或等于链表的长度。

如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。

 

示例：

给你这个链表：1->2->3->4->5

当 k = 2 时，应当返回: 2->1->4->3->5

当 k = 3 时，应当返回: 3->2->1->4->5

 

说明：

    你的算法只能使用常数的额外空间。
    你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。

 	
class Solution {
  public:
	  ListNode* reverseKGroup(ListNode* head, int k) {
		  int n = 0;
		  ListNode* pp = head;
		  while (pp != NULL) {
			  n++;
			  pp = pp->next;
		  }
		 
		  ListNode* H = (ListNode*)malloc(sizeof(ListNode));
		  ListNode* E = H;
		  int tt = n % k;
		  int t = n / k;
		  while (t --) {
			  ListNode* tNext = NULL;
			  ListNode* now = head;
			  ListNode* temp = NULL;
			  for (int i = 0; i < k; i++) {
				  head = head->next;

				  tNext = now->next;
				  now->next = temp;
				  temp = now;
				  now = tNext;
			  }
			  for (int i = 0; i < k; i++) {
				  E->next = temp;
				  E = temp;
				  temp = temp->next;
			  }
		  }
		  while (tt--) {
			  E->next = head;
			  E = head;
			  head = head->next;
		  }
		  return H->next;

	  }
  };